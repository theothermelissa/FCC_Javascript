function checkCashRegister(price, cash, cid) {
  
  // console.log(JSON.stringify(cid))
  let denominationIntegers = {
    "PENNY": 1, "NICKEL": 5,
    "DIME": 10, "QUARTER": 25,
    "ONE": 100, "FIVE": 500,
    "TEN": 1000, "TWENTY": 2000,
    "ONE HUNDRED": 10000
  };
  
  let integeredPrice = price*100;
  let integeredPayment = cash*100;
  let totalChangeDue = (integeredPayment - integeredPrice);
  let changeStillDue = totalChangeDue;
  
  let flattenedCID = cid.flat(1);
  function isPositive(val) {
    return val >= 0;
  }
  
  let integerize = function(val) {
    return val*100;
  }
  let add = (a, b) =>
  (a + b);
  let totalAvailableChange = flattenedCID
    .filter(isPositive)
    .map(integerize)
    .reduce(add);
  // console.log(JSON.stringify(totalAvailableChange));
  
  // running tally to add to transactionPrintout
  let changeToReturn = [];
  let currentStatus = "PENDING";
  //the returned end result of the transaction
  let transactionPrintout = {
    "status": currentStatus,
    "change": changeToReturn,
    };
  
  let updateChange = function(fromThisSlot) {
    // fromThisSlot should be an array with the first value the denom name, and the second the units needed
    changeToReturn.push(fromThisSlot);
    return changeToReturn;
  }

  let updatePrintout = function() {
    transactionPrintout["status"] = currentStatus;
    if (currentStatus === "INSUFFICIENT_FUNDS") {
      transactionPrintout["change"] = [];
    } else {
      transactionPrintout["change"] = changeToReturn;
    }
  }

  //let's get this party started
  console.log(changeStillDue);
  console.log(totalAvailableChange);

  if (totalAvailableChange === changeStillDue) {
    changeToReturn = cid;
    currentStatus = "CLOSED";
    updatePrintout();
    console.log(JSON.stringify(transactionPrintout))
    return transactionPrintout;
  } else if (totalAvailableChange < changeStillDue) {
    updateChange([]);
    currentStatus = "INSUFFICIENT_FUNDS";
    updatePrintout();
    console.log(JSON.stringify(transactionPrintout))
    return transactionPrintout;
  }
  else {
    currentStatus = "OPEN";
    for (var i = 8; i >=0; i--) {
      let thisDenomination = cid[i][0];
      console.log(thisDenomination);
      let theseUnits = denominationIntegers[thisDenomination];
      let availUnits = cid[i][1];
      let availIntegeredUnits = Math.round(availUnits*100);
      let leftoversNeeded = changeStillDue % theseUnits;
      let fromThisdrawer = (changeStillDue - leftoversNeeded)/100;
      console.log(leftoversNeeded);
      console.log(changeStillDue >= theseUnits);
      if (changeStillDue >= theseUnits){
        console.log("From this drawer: ", fromThisdrawer);
        if (changeStillDue <= availIntegeredUnits){
          updateChange([thisDenomination, fromThisdrawer]);
          changeStillDue = changeStillDue - fromThisdrawer*100;
        } else {
          updateChange([thisDenomination, availUnits]);
          changeStillDue -= availIntegeredUnits;
          console.log("Change still due: ", changeStillDue)
        }
      } else {
        continue;
      }
    }
    if (changeStillDue > 0) {
      currentStatus = "INSUFFICIENT_FUNDS";
    }
    updatePrintout();
  }

  console.log(JSON.stringify(transactionPrintout));  
  return transactionPrintout;


}



checkCashRegister(19.5, 20, [["PENNY", 0.01], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 1], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]);